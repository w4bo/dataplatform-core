plugins {
    id 'java-library'
    id 'idea'
    id 'org.jetbrains.kotlin.jvm' version '1.9.23'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
    id 'checkstyle'
}

test {
    testLogging {
        events "passed", "skipped", "failed"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true
        showStandardStreams = false
    }
}

java { toolchain {languageVersion = JavaLanguageVersion.of(11) } }

kotlin { jvmToolchain { languageVersion.set(JavaLanguageVersion.of(11)) } }

compileJava {
    sourceCompatibility = '11'
    targetCompatibility = '11'
}

compileKotlin { kotlinOptions { jvmTarget = '11' } }

compileTestKotlin { kotlinOptions { jvmTarget = '11' } }

shadowJar { zip64 = true }

javadoc { failOnError true }

repositories {
    maven { url "https://jcenter.bintray.com" }
    mavenCentral()
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

dependencies {
    implementation 'io.github.microutils:kotlin-logging-jvm:3.0.5'
    implementation 'khttp:khttp:1.0.0'
    implementation 'io.ktor:ktor-server-core:2.3.3'
    implementation 'io.ktor:ktor-server-netty:2.3.3'
    implementation 'org.slf4j:slf4j-api:2.0.7'
    implementation 'org.json:json:20230618'
    implementation 'io.github.cdimascio:dotenv-kotlin:6.4.1'
    implementation 'org.eclipse.paho:org.eclipse.paho.client.mqttv3:1.2.5'
    implementation 'commons-io:commons-io:2.13.0'
    implementation 'org.junit.jupiter:junit-jupiter:5.10.0'
    testCompileOnly 'org.slf4j:slf4j-simple:2.0.7'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'
    implementation 'org.apache.kafka:kafka-clients:3.5.1'
    implementation 'org.jetbrains.kotlinx:kotlinx-cli:0.3.5'
    implementation 'org.mongodb:mongo-java-driver:3.12.14'
    implementation 'commons-net:commons-net:3.9.0'
}

test {
    useJUnitPlatform()
    maxHeapSize = '1G'
}

task runWriteToMongo(type: JavaExec) {
    description = "Run the WriteToMongo service"
    classpath = sourceSets.main.runtimeClasspath
    main = 'it.unibo.writetomongo.WriteToMongo'
}

if (hasProperty('buildScan')) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'
    }
}

defaultTasks 'clean', 'build', 'check'